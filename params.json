{"name":"Easyhttp","body":"# EasyHttp\r\nA simplified wrapper around [the core node.js http client][http].\r\n\r\n## Basics\r\nThere are simple functions for 'get', 'post', 'put', and 'delete'.\r\n\r\nWith the exception of 'get', they all take a second argument in the\r\nform of a hash of params.\r\n\r\nAll require a callback function which will receive the body and [the ClientResponse object][response]. \r\n\r\n## GET\r\n```javascript\r\nvar client = require(\"easyhttp\");\r\nclient.get(\"http://server.com/foo/bar\",function(body,res){\r\n\t// do something\r\n});\r\n```\r\n\r\n## POST\r\n```javascript\r\nvar client = require(\"easyhttp\");\r\nclient.post(\"http://server.com/users/create\",\r\n\t{\"fname\":\"Luke\",\"lname\":\"Skywalker\"},\r\n\tfunction(body,res){\r\n\t\t// do your thing\r\n\t}\r\n);\r\n```\r\n\r\n## Low Level\r\nAll the simple functions end up calling the `doRequest` method, which looks like this:\r\n\r\n```javascript\r\nvar client = require(\"easyhttp\");\r\nclient.doRequest(\r\n\t\"http://server.com/service\",\r\n\t{\r\n\t\t\"method\":\"POST\",\r\n\t\t\"headers\":{\"Authorization\":\"token OAUTH-TOKEN\"},\r\n\t\t\"params\":{\"status\":\"You\\'ll never guess what she said next ...\"}\r\n\t},\r\n\tfunction(body,res){\r\n\t\t// do that thing you do so well\r\n\t}\r\n);\r\n```\r\n\r\n## Why?\r\nI find the node.js http client usage to be fast but verbose, so I decided to try to simplify it.\r\n\r\n\r\n[http]:http://nodejs.org/docs/latest/api/http.html#http.request\r\n[response]:http://nodejs.org/docs/latest/api/http.html#http.ClientResponse","tagline":"A simplified wrapper around the core node.js http client.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}